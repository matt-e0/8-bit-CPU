$date
	Sun Aug 17 20:26:02 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_alu $end
$var wire 1 ! z $end
$var wire 16 " y [15:0] $end
$var wire 1 # v $end
$var wire 1 $ n $end
$var wire 1 % c $end
$var reg 16 & A [15:0] $end
$var reg 5 ' ALUop [4:0] $end
$var reg 16 ( B [15:0] $end
$var reg 1 ) Ext_cin $end
$scope module DUT $end
$var wire 16 * A [15:0] $end
$var wire 5 + ALUop [4:0] $end
$var wire 16 , B [15:0] $end
$var wire 1 ) Ext_cin $end
$var wire 1 - add_cout $end
$var wire 1 . add_operation $end
$var wire 1 / add_ovf $end
$var wire 1 0 sub_operation $end
$var wire 1 ! z $end
$var wire 8 1 sum_lo [7:0] $end
$var wire 8 2 sum_hi [7:0] $end
$var wire 1 3 ovf_lo $end
$var wire 1 4 ovf_hi $end
$var wire 1 $ n $end
$var wire 1 5 c_out_lo $end
$var wire 1 6 c_out_hi $end
$var wire 16 7 add_sum [15:0] $end
$var wire 1 8 Cin_eff $end
$var parameter 5 9 ADC $end
$var parameter 5 : ADD $end
$var parameter 5 ; AND $end
$var parameter 5 < ASR $end
$var parameter 5 = LSL $end
$var parameter 5 > LSR $end
$var parameter 5 ? NOT $end
$var parameter 5 @ OR $end
$var parameter 5 A ROL $end
$var parameter 5 B ROR $end
$var parameter 5 C SBC $end
$var parameter 5 D SUB $end
$var parameter 5 E XOR $end
$var reg 1 % c $end
$var reg 1 # v $end
$var reg 16 F y [15:0] $end
$scope module a_adder $end
$var wire 8 G a [7:0] $end
$var wire 8 H b [7:0] $end
$var wire 1 I c1 $end
$var wire 1 J c2 $end
$var wire 1 K c3 $end
$var wire 1 L c4 $end
$var wire 1 M c5 $end
$var wire 1 N c6 $end
$var wire 1 O c7 $end
$var wire 1 P c8 $end
$var wire 1 8 cin $end
$var wire 1 5 cout $end
$var wire 8 Q g [7:0] $end
$var wire 1 3 ovf $end
$var wire 8 R p [7:0] $end
$var wire 8 S s [7:0] $end
$upscope $end
$scope module b_adder $end
$var wire 8 T a [7:0] $end
$var wire 8 U b [7:0] $end
$var wire 1 V c1 $end
$var wire 1 W c2 $end
$var wire 1 X c3 $end
$var wire 1 Y c4 $end
$var wire 1 Z c5 $end
$var wire 1 [ c6 $end
$var wire 1 \ c7 $end
$var wire 1 ] c8 $end
$var wire 1 5 cin $end
$var wire 1 6 cout $end
$var wire 8 ^ g [7:0] $end
$var wire 1 4 ovf $end
$var wire 8 _ p [7:0] $end
$var wire 8 ` s [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b110 E
b10 D
b11 C
b1100 B
b1011 A
b101 @
b111 ?
b1001 >
b1000 =
b1010 <
b100 ;
b0 :
b1 9
$end
#0
$dumpvars
b0 `
b0 _
b0 ^
0]
0\
0[
0Z
0Y
0X
0W
0V
b0 U
b0 T
b1111 S
b1111 R
b0 Q
0P
0O
0N
0M
0L
0K
0J
0I
b1010 H
b101 G
b1111 F
08
b1111 7
06
05
04
03
b0 2
b1111 1
00
0/
1.
0-
b1010 ,
b0 +
b101 *
0)
b1010 (
b0 '
b101 &
0%
0$
0#
b1111 "
0!
$end
#10
1%
1V
1W
1X
1Y
1Z
1[
1\
1-
16
1]
15
1P
1O
1N
1M
0$
1I
1K
1L
1J
b0 2
b0 `
b11111111 _
18
b101 7
b101 1
b101 S
b11110101 H
b11111111 U
b11111010 R
b101 Q
0.
10
0!
b101 "
b101 F
b1111 G
b10 '
b10 +
b1111 &
b1111 *
#20
0M
0L
0N
0O
05
0P
0W
0X
0Y
0Z
0[
0\
0-
06
0]
0V
0J
0K
b0 2
b0 `
0I
b0 _
08
b11111111 7
b11111111 1
b11111111 S
b0 U
b1111 H
b11111111 R
b0 Q
00
0%
1!
b0 "
b0 F
b11110000 G
b100 '
b100 +
b1111 (
b1111 ,
b11110000 &
b11110000 *
#30
0!
b11111111 "
b11111111 F
b101 '
b101 +
#40
b0 2
b0 `
0K
0L
0M
0N
0O
05
0P
0J
b11111111 7
b11111111 1
b11111111 S
b1010101 H
b11111111 R
b0 Q
0!
b11111111 "
b11111111 F
b10101010 G
b110 '
b110 +
b1010101 (
b1010101 ,
b10101010 &
b10101010 *
#50
b0 2
b0 `
1J
1K
1L
1M
0N
0O
05
0P
1I
b1100100 7
b1100100 1
b1100100 S
1$
b1011010 R
b101 Q
0!
b1111111111110000 "
b1111111111110000 F
b1111 G
b111 '
b111 +
b1111 &
b1111 *
#60
b1 2
b1 `
15
1P
03
1N
1O
b101010100 7
b1010100 1
b1010100 S
0$
b10101010 R
b1010101 Q
0!
b111111110 "
b111111110 F
b11111111 G
b1000 '
b1000 +
b11111111 &
b11111111 *
#70
05
0P
0-
06
0]
03
0\
0N
0O
0[
0Z
0L
0M
0Y
0X
0J
0K
0W
0V
0I
b1010101 1
b1010101 S
b1111111101010101 7
b11111111 2
b11111111 `
b1010101 R
b0 Q
b11111111 _
0!
b111111110000000 "
b111111110000000 F
b0 G
b11111111 T
b1001 '
b1001 +
b1111111100000000 &
b1111111100000000 *
#80
