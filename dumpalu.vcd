$date
	Sun Aug 17 19:57:30 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_alu $end
$var wire 1 ! z $end
$var wire 16 " y [15:0] $end
$var wire 1 # v $end
$var wire 1 $ n $end
$var wire 1 % c $end
$var reg 16 & A [15:0] $end
$var reg 5 ' ALUop [4:0] $end
$var reg 16 ( B [15:0] $end
$var reg 1 ) Ext_cin $end
$scope module DUT $end
$var wire 16 * A [15:0] $end
$var wire 5 + ALUop [4:0] $end
$var wire 16 , B [15:0] $end
$var wire 1 ) Ext_cin $end
$var wire 1 - add_cout $end
$var wire 1 . add_operation $end
$var wire 1 / add_ovf $end
$var wire 1 0 sub_operation $end
$var wire 1 ! z $end
$var wire 8 1 sum_lo [7:0] $end
$var wire 8 2 sum_hi [7:0] $end
$var wire 1 3 ovf_lo $end
$var wire 1 4 ovf_hi $end
$var wire 1 $ n $end
$var wire 1 5 c_out_lo $end
$var wire 1 6 c_out_hi $end
$var wire 8 7 b_B_eff [15:8] $end
$var wire 16 8 add_sum [15:0] $end
$var wire 8 9 a_B_eff [7:0] $end
$var wire 1 : Cin_eff $end
$var parameter 5 ; ADC $end
$var parameter 5 < ADD $end
$var parameter 5 = AND $end
$var parameter 5 > ASR $end
$var parameter 5 ? LSL $end
$var parameter 5 @ LSR $end
$var parameter 5 A NOT $end
$var parameter 5 B OR $end
$var parameter 5 C ROL $end
$var parameter 5 D ROR $end
$var parameter 5 E SBC $end
$var parameter 5 F SUB $end
$var parameter 5 G XOR $end
$var reg 1 % c $end
$var reg 1 # v $end
$var reg 16 H y [15:0] $end
$scope module a_adder $end
$var wire 8 I a [7:0] $end
$var wire 8 J b [7:0] $end
$var wire 1 K c1 $end
$var wire 1 L c2 $end
$var wire 1 M c3 $end
$var wire 1 N c4 $end
$var wire 1 O c5 $end
$var wire 1 P c6 $end
$var wire 1 Q c7 $end
$var wire 1 R c8 $end
$var wire 1 : cin $end
$var wire 1 5 cout $end
$var wire 8 S g [7:0] $end
$var wire 1 3 ovf $end
$var wire 8 T p [7:0] $end
$var wire 8 U s [7:0] $end
$upscope $end
$scope module b_adder $end
$var wire 8 V a [7:0] $end
$var wire 8 W b [7:0] $end
$var wire 1 X c1 $end
$var wire 1 Y c2 $end
$var wire 1 Z c3 $end
$var wire 1 [ c4 $end
$var wire 1 \ c5 $end
$var wire 1 ] c6 $end
$var wire 1 ^ c7 $end
$var wire 1 _ c8 $end
$var wire 1 5 cin $end
$var wire 1 6 cout $end
$var wire 8 ` g [7:0] $end
$var wire 1 4 ovf $end
$var wire 8 a p [7:0] $end
$var wire 8 b s [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b110 G
b10 F
b11 E
b1100 D
b1011 C
b101 B
b111 A
b1001 @
b1000 ?
b1010 >
b100 =
b0 <
b1 ;
$end
#0
$dumpvars
b0 b
b0 a
b0 `
0_
0^
0]
0\
0[
0Z
0Y
0X
b0 W
b0 V
b1111 U
b1111 T
b0 S
0R
0Q
0P
0O
0N
0M
0L
0K
b1010 J
b101 I
b1111 H
0:
b1010 9
b1111 8
b1010 7
06
05
04
03
b0 2
b1111 1
00
0/
1.
0-
b1010 ,
b0 +
b101 *
0)
b1010 (
b0 '
b101 &
0%
0$
0#
b1111 "
0!
$end
#10
1K
1M
1N
1L
b11110101 9
b11110101 7
1:
b11010 8
b11010 1
b11010 U
b101 T
b1010 S
0.
10
0!
b11010 "
b11010 H
b1111 I
b10 '
b10 +
b1111 &
b1111 *
#20
0M
0N
0K
0L
0:
b1111 9
b1111 7
b11111111 8
b11111111 1
b11111111 U
b11111111 T
b0 S
00
b1111 J
1!
b0 "
b0 H
b11110000 I
b100 '
b100 +
b1111 (
b1111 ,
b11110000 &
b11110000 *
#30
0!
b11111111 "
b11111111 H
b101 '
b101 +
#40
b1010101 9
b1010101 7
b1010101 J
0!
b11111111 "
b11111111 H
b10101010 I
b110 '
b110 +
b1010101 (
b1010101 ,
b10101010 &
b10101010 *
#50
b0 2
b0 b
1L
1M
1N
1O
0P
0Q
05
0R
1K
b1100100 8
b1100100 1
b1100100 U
1$
b1011010 T
b101 S
0!
b1111111111110000 "
b1111111111110000 H
b1111 I
b111 '
b111 +
b1111 &
b1111 *
#60
b1 2
b1 b
15
1R
03
1P
1Q
b101010100 8
b1010100 1
b1010100 U
0$
b10101010 T
b1010101 S
1%
0!
b11111110 "
b11111110 H
b11111111 I
b1000 '
b1000 +
b11111111 &
b11111111 *
#70
05
0R
0-
06
0_
03
0^
0P
0Q
0]
0\
0N
0O
0[
0Z
0L
0M
0Y
0X
0K
b1010101 1
b1010101 U
b1111111101010101 8
b11111111 2
b11111111 b
b1010101 T
b0 S
b11111111 a
0%
1!
b0 "
b0 H
b0 I
b11111111 V
b1001 '
b1001 +
b1111111100000000 &
b1111111100000000 *
#80
